#  0.000   7.896  14.450  33.300  31.280 512.300       1
full$Fare[is.na(full$Fare)]<-predict(fit.Fare,full[is.na(full$Fare),])
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Age decision tree (regression) method to predict the 20.09% missing Age data
fit.Age<-rpart(Age[!is.na(Age)]~Pclass+Title+Sex+SibSp+Parch+Fare,data=full[!is.na(full$Age),],method='anova')
# fancyRpartPlot(fit.Age, main="Age decision tree - predict the 20.09% missing Age data")
full$Age[is.na(full$Age)]<-predict(fit.Age,full[is.na(full$Age),])
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<-1
#check missing
data.frame(sapply(full,check.missing))
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
deck.fit<-rpart(Deck~Pclass+Fare,data=full[!is.na(full$Deck),])
full$Deck[is.na(full$Deck)]<-as.character(predict(deck.fit,full[is.na(full$Deck),],type='class'))
full$Deck[is.na(full$Deck)]<-'UNK'
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
#side.train<-full[!is.na(full$Side),]
#side.test<-full[is.na(full$Side),]
#side.fit<-rpart(Side~FamilyId+FamilySize,side.train,method='class')
#full$Side[is.na(full$Side)]<-as.character(predict(side.fit,side.test,type='class'))
#factorize the categorical variables
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
#split train/test data
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
#cforest (conditional inference tree) method, (support variables with more levels and missing values, with unbiased prediction)
fit.cf<-cforest(Survived~FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train,controls=cforest_unbiased(ntree=500, mtry=3))
#write submission
test$Survived<-predict(fit.cf,test,OOB=TRUE,type='response')
submission<-test[,1:2]
write.csv(submission,'submission_cforest.csv',row.names=F)
clc
clear
clean
library(party)
install.packages('party')
library(randomForest)
library(party)
library(rpart)
library(randomForest)
library(party)
library(rpart)
# library(rattle)
#checking the missing data
check.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))
data.frame(sapply(train,check.missing))
data.frame(sapply(test,check.missing))
#combine train/test data for pre-processing
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
table(full$Embarked)
#  C   Q   S
#270 123 914
# subset(full, is.na(Embarked)) -> Google -> "S"...
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
aggregate(Age~Title,full,median)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
#check the result
aggregate(Age~Title,full,summary, digits=2)
#         Title Age.Min. Age.1st Qu. Age.Median Age.Mean Age.3rd Qu. Age.Max.
#1          Col    47          52         54       54          57       60
#2           Dr    23          38         49       44          52       54
#3         Lady    38          38         39       42          44       48
#4       Master    0.33        2          4        5.50        9       14
#5         Miss    0.17        15         22       22          30       63
#6         Mlle    24          24         24       24          24       24
#7          Mme    24          24         24       24          24       24
#8           Mr    11          23         29       32          39       80
#9          Mrs    14          27         36       37          46       76
#10          Ms    28          28         28       28          28       28
#11         Rev    27          30         42       41          52       57
#12         Sir    40          45         49       51          52       70
#13 theCountess    33          33         33       33          33       33
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Fare
# create a decision tree for Fare based on Pclass+Title+Sex+SibSp+Parch (1 Passenger)
fit.Fare<-rpart(Fare[!is.na(Fare)]~Pclass+Title+Sex+SibSp+Parch,data=full[!is.na(full$Fare),],method='anova')
# display the results
printcp(fit.Fare)
# fancyRpartPlot(fit.Fare, main="Fare decision tree - overkill, predicting the 1 single missing Fare")
#predict(fit.Fare,full[is.na(full$Fare),])
#    1044
#12.08246
#> summary(full$Fare)
#
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#  0.000   7.896  14.450  33.300  31.280 512.300       1
full$Fare[is.na(full$Fare)]<-predict(fit.Fare,full[is.na(full$Fare),])
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
train$CabinNum<-sapply(train$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
train$CabinNum<-as.numeric(train$CabinNum)
train$CabinPos<-NA
# This R script will run on our backend. You can write arbitrary code here!
# Many standard libraries are already installed, such as randomForest
library(randomForest)
# The train and test data is stored in the ../input directory
train <- read.csv("../input/train.csv",na.strings=c('NA',''), stringsAsFactors=F)
test  <- read.csv("../input/test.csv",na.strings=c('NA',''), stringsAsFactors=F)
#Extract Cabin Num from Cabin
train$CabinNum<-sapply(train$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
train$CabinNum<-as.numeric(train$CabinNum)
train$CabinPos<-NA
#Categorize 1-50 as Front, 50-100 as Middle, >100 as End
train$CabinPos[train$CabinNum<50]<-'Front'
train$CabinPos[train$CabinNum>=50 & train$CabinNum<100]<-'Middle'
train$CabinPos[train$CabinNum>=100]<-'End'
train<-train[!is.na(train$CabinNum),]
train$CabinPos<-factor(train$CabinPos)
library(ggplot2)
ggplot(train,aes(x=CabinNum,fill=factor(Survived)))+geom_density(alpha=0.6)+labs(x='Cabin Number')
plot(aggregate(Survived~CabinPos,train,mean))
all_data$CabinNum<-sapply(all_data$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
all_data$CabinPos[train$CabinNum<50]<-'Front'
all_data$CabinPos[all_data$CabinNum<50]<-'Front'
all_data$CabinPos[all_data$CabinNum>=50 & all_data$CabinNum<100]<-'Middle'
all_data$CabinPos[all_data$CabinNum>=100]<-'End'
all_data<-all_data[!is.na(all_data$CabinNum),]
all_data$CabinPos<-factor(all_data$CabinPos)
###### Only run for the first time ! #####
# install.packages("rpart")
# install.packages("randomForest")
# install.packages("rattle")
# install.package("rpart.plot")
# install.packages("RColorBrewer")
# install.packages("ggplot2")
###### Load library
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
library(ggplot2)
library(rpart)
######### Read data ##########
# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
##### Complete, add data #####
# All data, both training and test set
test$Survived<-NA
all_data = rbind(train,test);
# create a new variable, a.k.a title
all_data$Name <-
strsplit(all_data$Name[1], split='[,.]')
strsplit(all_data$Name[1], split='[,.]')[[1]]
strsplit(all_data$Name[1], split='[,.]')[[1]][2]
all_data$Title <- sapply(all_data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
all_data$Title <- sub(' ', '', all_data$Title)
all_data$Title[all_data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
all_data$Title[all_data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
all_data$Title[all_data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
all_data$Title <- factor(all_data$Title)
# #Extract Cabin Num from Cabin
# all_data$CabinNum<-sapply(all_data$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
# train$CabinNum<-as.numeric(train$CabinNum)
# train$CabinPos<-NA
#
# #Categorize 1-50 as Front, 50-100 as Middle, >100 as End
# all_data$CabinPos[all_data$CabinNum<50]<-'Front'
# all_data$CabinPos[all_data$CabinNum>=50 & all_data$CabinNum<100]<-'Middle'
# all_data$CabinPos[all_data$CabinNum>=100]<-'End'
# all_data<-all_data[!is.na(all_data$CabinNum),]
# all_data$CabinPos<-factor(all_data$CabinPos)
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# # Factorize embarkment codes.
# all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# Create a new variable, a.k.a family_size
all_data$family_size <- all_data$SibSp + all_data$Parch + 1
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- round(predict(predicted_age, all_data[is.na(all_data$Age),]))
# Split the data back into a train set and a test set
train_new <- all_data[1:891,]
test_new <- all_data[892:1309,]
test_new$Survived <- NULL
# Find Cabin Class
# train_new$Cabin <- substr(train_new$Cabin,1,1)
# test_new$Cabin <- substr(test_new$Cabin,1,1)
#
# train_new$Cabin <- factor(train_new$Cabin)
# test_new$Cabin <- factor(test_new$Cabin)
# Train set and test set
str(train_new)
str(test_new)
######### Random Forest ##############
# Set seed for reproducibility
set.seed(111)
# Apply the Random Forest Algorithm
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, ntree = 500, importance = TRUE)
# Make your prediction using the test set
my_prediction <- predict(my_forest, test_new)
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
# See more about variable
varImpPlot(my_forest)
###### Only run for the first time ! #####
# install.packages("rpart")
# install.packages("randomForest")
# install.packages("rattle")
# install.package("rpart.plot")
# install.packages("RColorBrewer")
# install.packages("ggplot2")
###### Load library
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
library(ggplot2)
library(rpart)
######### Read data ##########
# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
##### Complete, add data #####
# All data, both training and test set
test$Survived<-NA
all_data = rbind(train,test);
# create a new variable, a.k.a title
all_data$Name <-
strsplit(all_data$Name[1], split='[,.]')
strsplit(all_data$Name[1], split='[,.]')[[1]]
strsplit(all_data$Name[1], split='[,.]')[[1]][2]
all_data$Title <- sapply(all_data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
all_data$Title <- sub(' ', '', all_data$Title)
all_data$Title[all_data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
all_data$Title[all_data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
all_data$Title[all_data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
all_data$Title <- factor(all_data$Title)
# #Extract Cabin Num from Cabin
# all_data$CabinNum<-sapply(all_data$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
# train$CabinNum<-as.numeric(train$CabinNum)
# train$CabinPos<-NA
#
# #Categorize 1-50 as Front, 50-100 as Middle, >100 as End
# all_data$CabinPos[all_data$CabinNum<50]<-'Front'
# all_data$CabinPos[all_data$CabinNum>=50 & all_data$CabinNum<100]<-'Middle'
# all_data$CabinPos[all_data$CabinNum>=100]<-'End'
# all_data<-all_data[!is.na(all_data$CabinNum),]
# all_data$CabinPos<-factor(all_data$CabinPos)
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# # Factorize embarkment codes.
# all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# Create a new variable, a.k.a family_size
all_data$family_size <- all_data$SibSp + all_data$Parch + 1
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- round(predict(predicted_age, all_data[is.na(all_data$Age),]))
# Split the data back into a train set and a test set
train_new <- all_data[1:891,]
test_new <- all_data[892:1309,]
test_new$Survived <- NULL
# Find Cabin Class
# train_new$Cabin <- substr(train_new$Cabin,1,1)
# test_new$Cabin <- substr(test_new$Cabin,1,1)
#
# train_new$Cabin <- factor(train_new$Cabin)
# test_new$Cabin <- factor(test_new$Cabin)
# Train set and test set
str(train_new)
str(test_new)
######### Random Forest ##############
# Set seed for reproducibility
set.seed(111)
# Apply the Random Forest Algorithm
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, ntree = 500, importance = TRUE)
# Make your prediction using the test set
my_prediction <- predict(my_forest, test_new)
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
# See more about variable
varImpPlot(my_forest)
View(test_new)
View(test_new)
###### Only run for the first time ! #####
# install.packages("rpart")
# install.packages("randomForest")
# install.packages("rattle")
# install.package("rpart.plot")
# install.packages("RColorBrewer")
# install.packages("ggplot2")
###### Load library
library(rattle)
library(rpart.plot)
install.packages("rattle")
install.packages("RGtk2")
install.packages("RGtk")
library(rattle)
install.packages("rattle")
strplit("abc","[]")
strsplit("abc","[]")
unlist(strsplit("a.b.c", "."))
strsplit("a.b.c", "."))
strsplit("a.b.c", ".")
strsplit("abc", "")
all_data$Name <-strsplit(all_data$Name[1], split='[,.]')
strsplit(all_data$Name[1], split='[,.]')[[1]]
strsplit(all_data$Name[1], split='[,.]')[[1]][2]
all_data$Title <- sapply(all_data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
all_data$Title <- sub(' ', '', all_data$Title)
all_data$Title[all_data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
all_data$Title[all_data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
all_data$Title[all_data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
all_data$Title <- factor(all_data$Title)
all_data$Name <- as.character(all_data$Name)
strsplit(all_data$Name[1], split='[,.]')
strsplit(all_data$Name[1], split='[,.]')[[1]]
strsplit(all_data$Name[1], split='[,.]')[[1]][2]
all_data$Title <- sapply(all_data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
all_data$Title <- sub(' ', '', all_data$Title)
all_data$Title[all_data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
all_data$Title[all_data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
all_data$Title[all_data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
all_data$Title <- factor(all_data$Title)
all_data$Deck<- as.character(all_data$Cabin)
strsplit(all_data$Cabin[1], split = '[]')
strsplit(all_data$Cabin[1], "")
strsplit(all_data$Cabin[1], split = NULL)
all_data$Cabin[1]
strsplit(all_data$Cabin[1], split = "[]")
###### Only run for the first time ! #####
# install.packages("RGtk2")
# install.packages("rpart")
# install.packages("randomForest")
# install.packages("rattle")
# install.package("rpart.plot")
# install.packages("RColorBrewer")
# install.packages("ggplot2")
###### Load library
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
library(ggplot2)
library(rpart)
######### Read data ##########
# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
##### Complete, add data #####
# All data, both training and test set
test$Survived<-NA
all_data = rbind(train,test);
# create a new variable, a.k.a title
all_data$Name <- as.character(all_data$Name)
strsplit(all_data$Name[1], split='[,.]')
strsplit(all_data$Name[1], split='[,.]')[[1]]
strsplit(all_data$Name[1], split='[,.]')[[1]][2]
all_data$Title <- sapply(all_data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
all_data$Title <- sub(' ', '', all_data$Title)
all_data$Title[all_data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
all_data$Title[all_data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
all_data$Title[all_data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
all_data$Title <- factor(all_data$Title)
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# # Factorize embarkment codes.
# all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# Create a new variable, a.k.a family_size
all_data$family_size <- all_data$SibSp + all_data$Parch + 1
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- round(predict(predicted_age, all_data[is.na(all_data$Age),]))
# Split the data back into a train set and a test set
train_new <- all_data[1:891,]
test_new <- all_data[892:1309,]
test_new$Survived <- NULL
# Find Cabin Class
# train_new$Cabin <- substr(train_new$Cabin,1,1)
# test_new$Cabin <- substr(test_new$Cabin,1,1)
#
# train_new$Cabin <- factor(train_new$Cabin)
# test_new$Cabin <- factor(test_new$Cabin)
# Train set and test set
str(train_new)
str(test_new)
###### Decision tree ######
# train_new and test_new are available in the workspace
str(train_new)
str(test_new)
# Create a new model `my_tree_five`
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, method="class")
# Visualize your new decision tree
fancyRpartPlot(my_tree_five)
# Make your prediction using `my_tree_five` and `test_new`
my_prediction <- predict(my_tree_five, test_new, type = "class")
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
#Extract Cabin Num from Cabin
train$CabinNum<-sapply(train$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
train$CabinNum<-as.numeric(train$CabinNum)
train$CabinPos<-NA
#Extract Cabin Num from Cabin
train$CabinNum<-sapply(train$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
train$CabinNum<-as.numeric(train$CabinNum)
train$CabinPos<-NA
exit
# This R script will run on our backend. You can write arbitrary code here!
# Many standard libraries are already installed, such as randomForest
library(randomForest)
# The train and test data is stored in the ../input directory
train <- read.csv("../input/train.csv",na.strings=c('NA',''), stringsAsFactors=F)
test  <- read.csv("../input/test.csv",na.strings=c('NA',''), stringsAsFactors=F)
#Extract Cabin Num from Cabin
train$CabinNum<-sapply(train$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
train$CabinNum<-as.numeric(train$CabinNum)
train$CabinPos<-NA
#Categorize 1-50 as Front, 50-100 as Middle, >100 as End
train$CabinPos[train$CabinNum<50]<-'Front'
train$CabinPos[train$CabinNum>=50 & train$CabinNum<100]<-'Middle'
train$CabinPos[train$CabinNum>=100]<-'End'
train<-train[!is.na(train$CabinNum),]
train$CabinPos<-factor(train$CabinPos)
library(ggplot2)
ggplot(train,aes(x=CabinNum,fill=factor(Survived)))+geom_density(alpha=0.6)+labs(x='Cabin Number')
plot(aggregate(Survived~CabinPos,train,mean))
######## Read data ##########
# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
##### Complete, add data #####
# All data, both training and test set
test$Survived<-NA
all_data = rbind(train,test);
train$CabinPos[train$CabinNum<50]<-'Front'
train$CabinPos[train$CabinNum>=50 & train$CabinNum<100]<-'Middle'
train$CabinPos[train$CabinNum>=100]<-'End'
train<-train[!is.na(train$CabinNum),]
train$CabinPos<-factor(train$CabinPos)
library(ggplot2)
ggplot(train,aes(x=CabinNum,fill=factor(Survived)))+geom_density(alpha=0.6)+labs(x='Cabin Number')
plot(aggregate(Survived~CabinPos,train,mean))
